/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/datasets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Datasets
         * @description Retrieve a list of datasets from the database.
         */
        get: operations["read_datasets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datasets/{dataset_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Dataset
         * @description Retrieve a single dataset from the database.
         */
        get: operations["read_dataset"];
        /**
         * Update Dataset
         * @description Update an existing dataset in the database.
         */
        put: operations["update_dataset"];
        post?: never;
        /**
         * Delete Dataset
         * @description Delete a dataset from the database.
         */
        delete: operations["delete_dataset"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datasets/{dataset_id}/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Export Dataset To Absolute Paths
         * @description Export dataset from the database.
         */
        post: operations["export_dataset_to_absolute_paths"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datasets/{dataset_id}/export/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Export Dataset Stats
         * @description Get statistics about the export query.
         */
        post: operations["export_dataset_stats"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datasets/{dataset_id}/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Tags
         * @description Retrieve a list of tags from the database.
         */
        get: operations["read_tags"];
        put?: never;
        /**
         * Create Tag
         * @description Create a new tag in the database.
         */
        post: operations["create_tag"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datasets/{dataset_id}/tags/{tag_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Tag
         * @description Retrieve a single tag from the database.
         */
        get: operations["read_tag"];
        /**
         * Update Tag
         * @description Update an existing tag in the database.
         */
        put: operations["update_tag"];
        post?: never;
        /**
         * Delete Tag
         * @description Delete a tag from the database.
         */
        delete: operations["delete_tag"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datasets/{dataset_id}/tags/{tag_id}/add/samples": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Sample Ids To Tag Id
         * @description Add sample_ids to a tag_id.
         */
        post: operations["add_sample_ids_to_tag_id"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datasets/{dataset_id}/tags/{tag_id}/remove/samples": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove Thing Ids To Tag Id
         * @description Add thing_ids to a tag_id.
         */
        delete: operations["remove_thing_ids_to_tag_id"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datasets/{dataset_id}/tags/{tag_id}/add/annotations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Annotation Ids To Tag Id
         * @description Add thing_ids to a tag_id.
         */
        post: operations["add_annotation_ids_to_tag_id"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datasets/{dataset_id}/tags/{tag_id}/remove/annotations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove Annotation Ids To Tag Id
         * @description Add thing_ids to a tag_id.
         */
        delete: operations["remove_annotation_ids_to_tag_id"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datasets/{dataset_id}/export/annotations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Export Dataset Annotations
         * @description Export dataset annotations for an object detection task in COCO format.
         */
        get: operations["export_dataset_annotations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datasets/{dataset_id}/samples/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Read Samples
         * @description Retrieve a list of samples from the database with optional filtering.
         *
         *     Args:
         *         session: The database session.
         *         dataset_id: The ID of the dataset to filter samples by.
         *         body: Optional request body containing text embedding.
         *
         *     Returns:
         *         A list of filtered samples.
         */
        post: operations["read_samples"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datasets/{dataset_id}/samples/dimensions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Sample Dimensions
         * @description Get min and max dimensions of samples in a dataset.
         */
        get: operations["get_sample_dimensions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datasets/{dataset_id}/samples/{sample_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Sample
         * @description Retrieve a single sample from the database.
         */
        get: operations["read_sample"];
        /**
         * Update Sample
         * @description Update an existing sample in the database.
         */
        put: operations["update_sample"];
        post?: never;
        /**
         * Delete Sample
         * @description Delete a sample from the database.
         */
        delete: operations["delete_sample"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datasets/{dataset_id}/samples/{sample_id}/tag/{tag_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Tag To Sample
         * @description Add sample to a tag.
         */
        post: operations["add_tag_to_sample"];
        /**
         * Remove Tag From Sample
         * @description Remove sample from a tag.
         */
        delete: operations["remove_tag_from_sample"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/annotation_labels": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Annotation Labels
         * @description Retrieve a list of annotation labels from the database.
         */
        get: operations["read_annotation_labels"];
        put?: never;
        /**
         * Create Annotation Label
         * @description Create a new annotation label in the database.
         */
        post: operations["create_annotation_label"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/annotation_labels/{label_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Annotation Label
         * @description Retrieve a single annotation label from the database.
         */
        get: operations["read_annotation_label"];
        /**
         * Update Annotation Label
         * @description Update an existing annotation label in the database.
         */
        put: operations["update_annotation_label"];
        post?: never;
        /**
         * Delete Annotation Label
         * @description Delete an annotation label from the database.
         */
        delete: operations["delete_annotation_label"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datasets/{dataset_id}/annotations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Annotations
         * @description Retrieve a list of annotations from the database.
         */
        get: operations["read_annotations"];
        /**
         * Update Annotations
         * @description Update multiple annotations in the database.
         */
        put: operations["update_annotations"];
        /**
         * Create Annotation
         * @description Create a new annotation.
         */
        post: operations["create_annotation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datasets/{dataset_id}/annotations/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Count Annotations By Dataset
         * @description Get annotation counts for a specific dataset.
         *
         *     Returns a list of dictionaries with label name and count.
         */
        get: operations["count_annotations_by_dataset"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datasets/{dataset_id}/annotations/{annotation_id}/tag/{tag_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Tag To Annotation
         * @description Add annotation to a tag.
         */
        post: operations["add_tag_to_annotation"];
        /**
         * Remove Tag From Annotation
         * @description Remove annotation from a tag.
         */
        delete: operations["remove_tag_from_annotation"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datasets/{dataset_id}/annotations/{annotation_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Annotation
         * @description Retrieve an existing annotation from the database.
         */
        get: operations["get_annotation"];
        /**
         * Update Annotation
         * @description Update an existing annotation in the database.
         */
        put: operations["update_annotation"];
        post?: never;
        /**
         * Delete Annotation
         * @description Delete an annotation from the database.
         */
        delete: operations["delete_annotation"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datasets/{dataset_id}/captions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read Captions
         * @description Retrieve captions for a dataset.
         */
        get: operations["read_captions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/text_embedding/embed_text": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Embed Text
         * @description Retrieve embeddings for the input text.
         */
        get: operations["embed_text"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Settings
         * @description Get the current settings.
         *
         *     Args:
         *         session: Database session.
         *
         *     Returns:
         *         The current settings.
         */
        get: operations["get_settings"];
        put?: never;
        /**
         * Set Settings
         * @description Update user settings.
         *
         *     Args:
         *         settings: New settings to apply.
         *         session: Database session.
         *
         *     Returns:
         *         Updated settings.
         */
        post: operations["set_settings"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/classifiers/get_negative_samples": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get Negative Samples
         * @description Get negative samples for classifier training.
         *
         *     Args:
         *         request: The request containing negative sample parameters.
         *         session: Database session.
         *
         *     Returns:
         *         The response containing negative sample IDs.
         */
        post: operations["get_negative_samples"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/classifiers/{classifier_id}/samples_to_refine": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Samples To Refine
         * @description Get samples for classifier refinement.
         *
         *     Args:
         *         classifier_id: The ID of the classifier.
         *         dataset_id: The ID of the dataset.
         *         session: Database session.
         *
         *     Returns:
         *         The response containing sample IDs for refinement.
         */
        get: operations["samples_to_refine"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/classifiers/{classifier_id}/sample_history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Sample History
         * @description Get all samples used in the classifier training.
         *
         *     Args:
         *         classifier_id: The ID of the classifier.
         *
         *     Returns:
         *         The response containing sample IDs used in the training.
         */
        get: operations["sample_history"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/classifiers/{classifier_id}/commit_temp_classifier": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Commit Temp Classifier
         * @description Commit the classifier.
         *
         *     Args:
         *         classifier_id: The ID of the classifier.
         *
         *     Returns:
         *         None
         */
        post: operations["commit_temp_classifier"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/classifiers/{classifier_id}/drop_temp_classifier": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Drop Temp Classifier
         * @description Drop the classifier.
         *
         *     Args:
         *         classifier_id: The ID of the classifier.
         *
         *     Returns:
         *         None
         */
        delete: operations["drop_temp_classifier"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/classifiers/{classifier_id}/save_classifier_to_file/{export_type}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Save Classifier To File
         * @description Save the classifier to a file.
         *
         *     Args:
         *         classifier_id: The ID of the classifier.
         *         export_type: The type of export (e.g., "sklearn", "lightly").
         *
         *     Returns:
         *         StreamingResponse containing the pickled classifier file.
         */
        post: operations["save_classifier_to_file"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/classifiers/load_classifier_from_file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Load Classifier From File
         * @description Load the classifier from a file.
         *
         *     Args:
         *         request: The request containing the file path.
         *         session: Database session.
         *
         *     Returns:
         *         Response with the ID of the loaded classifier.
         */
        post: operations["load_classifier_from_file"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/classifiers/load_classifier_from_buffer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Load Classifier From Buffer
         * @description Load a classifier from an uploaded file buffer.
         *
         *     Args:
         *         file: The uploaded classifier file.
         *         session: Database session.
         *
         *     Returns:
         *         The ID of the loaded classifier.
         */
        post: operations["load_classifier_from_buffer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/classifiers/{classifier_id}/train_classifier": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Train Classifier
         * @description Train the classifier.
         *
         *     Args:
         *         classifier_id: The ID of the classifier.
         *         session: Database session.
         *
         *     Returns:
         *         None
         */
        post: operations["train_classifier"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/classifiers/{classifier_id}/update_annotations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update Classifiers Annotations
         * @description Update the annotations for a classifier.
         *
         *     Args:
         *         classifier_id: The ID of the classifier.
         *         request: The request containing the new annotations.
         *
         *     Returns:
         *         None
         */
        post: operations["update_classifiers_annotations"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/classifiers/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Classifier
         * @description Create a new classifier.
         *
         *     Args:
         *         request: The request containing classifier creation parameters.
         *         session: Database session.
         *
         *     Returns:
         *         Response with the name and ID of the classifier.
         */
        post: operations["create_classifier"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/classifiers/get_all_classifiers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get All Classifiers
         * @description Get all active classifiers.
         *
         *     Returns:
         *         Response with list of tuples containing classifier names and IDs.
         */
        get: operations["get_all_classifiers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/classifiers/{classifier_id}/run_on_dataset/{dataset_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Run Classifier Route
         * @description Run the classifier on a dataset.
         *
         *     Args:
         *         dataset_id: The ID of the dataset to run the classifier on.
         *         classifier_id: The ID of the classifier.
         *         session: Database session.
         *
         *     Returns:
         *         None
         */
        post: operations["run_classifier_route"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/embeddings2d/default": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get 2D Embeddings
         * @description Return 2D embeddings serialized as an Arrow stream.
         */
        post: operations["get_2d_embeddings"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/features": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Features
         * @description Get the list of active features in the LightlyStudio app.
         */
        get: operations["get_features"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datasets/{dataset_id}/metadata/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Metadata Info
         * @description Get all metadata keys and their schema for a dataset.
         *
         *     Args:
         *         session: The database session.
         *         dataset_id: The ID of the dataset.
         *
         *     Returns:
         *         List of metadata info objects with name, type, and optionally min/max values
         *         for numerical metadata types.
         */
        get: operations["get_metadata_info"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datasets/{dataset_id}/metadata/typicality": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Compute Typicality Metadata
         * @description Compute typicality metadata for a dataset.
         *
         *     Args:
         *         session: The database session.
         *         dataset: The dataset to compute typicality for.
         *         request: Request parameters including optional embedding model name
         *             and metadata field name.
         *
         *     Returns:
         *         None (204 No Content on success).
         */
        post: operations["compute_typicality_metadata"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/datasets/{dataset_id}/selection": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Combination Selection
         * @description Create a combination selection on the dataset.
         *
         *     This endpoint performs combination selection using embeddings and metadata.
         *     The selected samples are tagged with the specified tag name.
         *
         *     Args:
         *         session: Database session dependency.
         *         dataset: Dataset to perform selection on.
         *         request: Selection parameters including sample count and tag name.
         *
         *     Returns:
         *         None (204 No Content on success).
         *
         *     Raises:
         *         HTTPException: 400 if selection fails due to invalid parameters or other errors.
         */
        post: operations["create_combination_selection"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/images/sample/{sample_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Serve Image By Sample Id
         * @description Serve an image by sample ID.
         *
         *     Args:
         *         sample_id: The ID of the sample.
         *         session: Database session.
         *
         *     Returns:
         *         StreamingResponse with the image data.
         *
         *     Raises:
         *         HTTPException: If the sample is not found or the file is not accessible.
         */
        get: operations["serve_image_by_sample_id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * AnnotationBaseTable
         * @description Base class for all annotation models.
         */
        AnnotationBaseTable: {
            /**
             * Created At
             * Format: date-time
             */
            created_at?: string;
            /**
             * Annotation Id
             * Format: uuid
             */
            annotation_id?: string;
            annotation_type: components["schemas"]["AnnotationType"];
            /**
             * Annotation Label Id
             * Format: uuid
             */
            annotation_label_id: string;
            /** Confidence */
            confidence?: number | null;
            /**
             * Dataset Id
             * Format: uuid
             */
            dataset_id: string;
            /**
             * Sample Id
             * Format: uuid
             */
            sample_id: string;
        };
        /**
         * AnnotationCreateInput
         * @description API interface to create annotation.
         */
        AnnotationCreateInput: {
            /**
             * Annotation Label Id
             * Format: uuid
             */
            annotation_label_id: string;
            annotation_type: components["schemas"]["AnnotationType"];
            /**
             * Sample Id
             * Format: uuid
             */
            sample_id: string;
            /** X */
            x?: number | null;
            /** Y */
            y?: number | null;
            /** Width */
            width?: number | null;
            /** Height */
            height?: number | null;
            /** Segmentation Mask */
            segmentation_mask?: number[] | null;
        };
        /**
         * AnnotationDetailsView
         * @description Representing detailed view of an annotation.
         */
        AnnotationDetailsView: {
            /**
             * Sample Id
             * Format: uuid
             */
            sample_id: string;
            /**
             * Dataset Id
             * Format: uuid
             */
            dataset_id: string;
            /**
             * Annotation Id
             * Format: uuid
             */
            annotation_id: string;
            annotation_type: components["schemas"]["AnnotationType"];
            annotation_label: components["schemas"]["AnnotationLabel"];
            /** Confidence */
            confidence?: number | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            object_detection_details?: components["schemas"]["ObjectDetectionAnnotationView"] | null;
            instance_segmentation_details?: components["schemas"]["InstanceSegmentationAnnotationView"] | null;
            semantic_segmentation_details?: components["schemas"]["SemanticSegmentationAnnotationView"] | null;
            /**
             * Tags
             * @default []
             */
            tags: components["schemas"]["AnnotationViewTag"][];
            sample: components["schemas"]["AnnotationImageView"];
        };
        /**
         * AnnotationIdsBody
         * @description body parameters for adding or removing annotation_ids.
         */
        AnnotationIdsBody: {
            /**
             * Annotation Ids
             * @description annotation ids to add/remove
             */
            annotation_ids?: string[] | null;
        };
        /**
         * AnnotationImageView
         * @description Sample class for annotation view.
         */
        AnnotationImageView: {
            /** File Path Abs */
            file_path_abs: string;
            /** File Name */
            file_name: string;
            /**
             * Dataset Id
             * Format: uuid
             */
            dataset_id: string;
            /**
             * Sample Id
             * Format: uuid
             */
            sample_id: string;
            /** Width */
            width: number;
            /** Height */
            height: number;
        };
        /**
         * AnnotationLabel
         * @description Model used when retrieving an annotation label.
         */
        AnnotationLabel: {
            /** Annotation Label Name */
            annotation_label_name: string;
        };
        /**
         * AnnotationLabelCreate
         * @description Model used when creating an annotation label.
         */
        AnnotationLabelCreate: {
            /** Annotation Label Name */
            annotation_label_name: string;
        };
        /**
         * AnnotationLabelTable
         * @description This class defines the AnnotationLabel model.
         */
        AnnotationLabelTable: {
            /** Annotation Label Name */
            annotation_label_name: string;
            /**
             * Annotation Label Id
             * Format: uuid
             */
            annotation_label_id?: string;
            /** Created At */
            created_at?: string;
        };
        /**
         * AnnotationType
         * @description The type of annotation task.
         * @enum {string}
         */
        AnnotationType: "classification" | "semantic_segmentation" | "instance_segmentation" | "object_detection";
        /**
         * AnnotationUpdateInput
         * @description API input model for updating an annotation.
         */
        AnnotationUpdateInput: {
            /**
             * Annotation Id
             * Format: uuid
             */
            annotation_id: string;
            /**
             * Dataset Id
             * Format: uuid
             */
            dataset_id: string;
            /** Label Name */
            label_name?: string | null;
            bounding_box?: components["schemas"]["BoundingBoxCoordinates"] | null;
        };
        /**
         * AnnotationView
         * @description Response model for bounding box annotation.
         */
        AnnotationView: {
            /**
             * Sample Id
             * Format: uuid
             */
            sample_id: string;
            /**
             * Dataset Id
             * Format: uuid
             */
            dataset_id: string;
            /**
             * Annotation Id
             * Format: uuid
             */
            annotation_id: string;
            annotation_type: components["schemas"]["AnnotationType"];
            annotation_label: components["schemas"]["AnnotationLabel"];
            /** Confidence */
            confidence?: number | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            object_detection_details?: components["schemas"]["ObjectDetectionAnnotationView"] | null;
            instance_segmentation_details?: components["schemas"]["InstanceSegmentationAnnotationView"] | null;
            semantic_segmentation_details?: components["schemas"]["SemanticSegmentationAnnotationView"] | null;
            /**
             * Tags
             * @default []
             */
            tags: components["schemas"]["AnnotationViewTag"][];
        };
        /**
         * AnnotationViewTag
         * @description Tag view inside Annotation view.
         */
        AnnotationViewTag: {
            /**
             * Tag Id
             * Format: uuid
             */
            tag_id: string;
            /** Name */
            name: string;
        };
        /**
         * AnnotationViewsWithCount
         * @description Response model for counted annotations.
         */
        AnnotationViewsWithCount: {
            /** Data */
            data: components["schemas"]["AnnotationWithImageView"][];
            /** Total Count */
            total_count: number;
            /** Nextcursor */
            nextCursor: number | null;
        };
        /**
         * AnnotationWithImageView
         * @description Response model for bounding box annotation.
         */
        AnnotationWithImageView: {
            /**
             * Sample Id
             * Format: uuid
             */
            sample_id: string;
            /**
             * Dataset Id
             * Format: uuid
             */
            dataset_id: string;
            /**
             * Annotation Id
             * Format: uuid
             */
            annotation_id: string;
            annotation_type: components["schemas"]["AnnotationType"];
            annotation_label: components["schemas"]["AnnotationLabel"];
            /** Confidence */
            confidence?: number | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            object_detection_details?: components["schemas"]["ObjectDetectionAnnotationView"] | null;
            instance_segmentation_details?: components["schemas"]["InstanceSegmentationAnnotationView"] | null;
            semantic_segmentation_details?: components["schemas"]["SemanticSegmentationAnnotationView"] | null;
            /**
             * Tags
             * @default []
             */
            tags: components["schemas"]["AnnotationViewTag"][];
            sample: components["schemas"]["AnnotationImageView"];
        };
        /** Body_load_classifier_from_buffer_api_classifiers_load_classifier_from_buffer_post */
        Body_load_classifier_from_buffer_api_classifiers_load_classifier_from_buffer_post: {
            /**
             * File
             * Format: binary
             */
            file: string;
        };
        /** BoundingBoxCoordinates */
        BoundingBoxCoordinates: {
            /** X */
            x: number;
            /** Y */
            y: number;
            /** Width */
            width: number;
            /** Height */
            height: number;
        };
        /**
         * CaptionView
         * @description Response model for caption.
         */
        CaptionView: {
            /**
             * Sample Id
             * Format: uuid
             */
            sample_id: string;
            /**
             * Dataset Id
             * Format: uuid
             */
            dataset_id: string;
            /**
             * Caption Id
             * Format: uuid
             */
            caption_id: string;
            /** Text */
            text: string;
        };
        /**
         * CaptionViewsBySample
         * @description Response model for captions of a sample.
         */
        CaptionViewsBySample: {
            /**
             * Sample Id
             * Format: uuid
             */
            sample_id: string;
            /** Captions */
            captions: components["schemas"]["CaptionView"][];
        };
        /**
         * CaptionViewsBySampleWithCount
         * @description Response model for counted captions.
         */
        CaptionViewsBySampleWithCount: {
            /** Data */
            data: components["schemas"]["CaptionViewsBySample"][];
            /** Total Count */
            total_count: number;
            /** Nextcursor */
            nextCursor: number | null;
        };
        /**
         * ComputeTypicalityRequest
         * @description Request model for computing typicality metadata.
         */
        ComputeTypicalityRequest: {
            /**
             * Embedding Model Name
             * @description Embedding model name (uses default if not specified)
             */
            embedding_model_name?: string | null;
            /**
             * Metadata Name
             * @description Metadata field name (defaults to 'typicality')
             * @default typicality
             */
            metadata_name: string;
        };
        /**
         * CreateClassifierRequest
         * @description Request model for creating a classifier.
         */
        CreateClassifierRequest: {
            /** Name */
            name: string;
            /** Class List */
            class_list: string[];
            /**
             * Dataset Id
             * Format: uuid
             */
            dataset_id: string;
        };
        /**
         * CreateClassifierResponse
         * @description Response model for creating a classifier.
         */
        CreateClassifierResponse: {
            /** Name */
            name: string;
            /** Classifier Id */
            classifier_id: string;
        };
        /**
         * DatasetCreate
         * @description Dataset class when inserting.
         */
        DatasetCreate: {
            /** Name */
            name: string;
            /** Parent Dataset Id */
            parent_dataset_id?: string | null;
            sample_type: components["schemas"]["SampleType"];
        };
        /**
         * DatasetTable
         * @description This class defines the Dataset model.
         */
        DatasetTable: {
            /** Name */
            name: string;
            /** Parent Dataset Id */
            parent_dataset_id?: string | null;
            sample_type: components["schemas"]["SampleType"];
            /**
             * Dataset Id
             * Format: uuid
             */
            dataset_id?: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at?: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at?: string;
        };
        /**
         * DatasetView
         * @description Dataset class when retrieving.
         */
        DatasetView: {
            /** Name */
            name: string;
            /** Parent Dataset Id */
            parent_dataset_id?: string | null;
            sample_type: components["schemas"]["SampleType"];
            /**
             * Dataset Id
             * Format: uuid
             */
            dataset_id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * DatasetViewWithCount
         * @description Dataset view with total sample count.
         */
        DatasetViewWithCount: {
            /** Name */
            name: string;
            /** Parent Dataset Id */
            parent_dataset_id?: string | null;
            sample_type: components["schemas"]["SampleType"];
            /**
             * Dataset Id
             * Format: uuid
             */
            dataset_id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            /** Total Sample Count */
            total_sample_count: number;
        };
        /**
         * EmbeddingClassifier
         * @description Base class for the Classifier model.
         */
        EmbeddingClassifier: {
            /** Classifier Name */
            classifier_name: string;
            /**
             * Classifier Id
             * Format: uuid
             */
            classifier_id: string;
            /** Class List */
            class_list: string[];
        };
        /**
         * EmbeddingDiversityStrategy
         * @description Selection strategy based on embedding diversity.
         */
        EmbeddingDiversityStrategy: {
            /**
             * Strength
             * @default 1
             */
            strength: number;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            strategy_name: "diversity";
            /** Embedding Model Name */
            embedding_model_name?: string | null;
        };
        /**
         * ExportBody
         * @description body parameters for including or excluding tag_ids or sample_ids.
         */
        ExportBody: {
            /** @description include filter for sample_ids or tag_ids */
            include?: components["schemas"]["ExportFilter"] | null;
            /** @description exclude filter for sample_ids or tag_ids */
            exclude?: components["schemas"]["ExportFilter"] | null;
        };
        /**
         * ExportFilter
         * @description Export Filter to be used for including or excluding.
         */
        ExportFilter: {
            /**
             * Tag Ids
             * @description List of tag UUIDs
             */
            tag_ids?: string[] | null;
            /**
             * Sample Ids
             * @description List of sample UUIDs
             */
            sample_ids?: string[] | null;
            /**
             * Annotation Ids
             * @description List of annotation UUIDs
             */
            annotation_ids?: string[] | null;
        };
        /**
         * FilterDimensions
         * @description Encapsulates dimension-based filter parameters for querying samples.
         */
        FilterDimensions: {
            /** Min */
            min?: number | null;
            /** Max */
            max?: number | null;
        };
        /**
         * GetAllClassifiersResponse
         * @description Response model for getting all active classifiers.
         */
        GetAllClassifiersResponse: {
            /** Classifiers */
            classifiers: components["schemas"]["EmbeddingClassifier"][];
        };
        /**
         * GetEmbeddings2DRequest
         * @description Request body for retrieving 2D embeddings.
         */
        GetEmbeddings2DRequest: {
            /** @description Filter parameters identifying matching samples */
            filters?: components["schemas"]["SampleFilter"] | null;
        };
        /**
         * GetNegativeSamplesRequest
         * @description Request for getting negative samples for classifier training.
         */
        GetNegativeSamplesRequest: {
            /** Positive Sample Ids */
            positive_sample_ids: string[];
            /**
             * Dataset Id
             * Format: uuid
             */
            dataset_id: string;
        };
        /**
         * GetNegativeSamplesResponse
         * @description Response for getting negative samples for classifier training.
         */
        GetNegativeSamplesResponse: {
            /** Negative Sample Ids */
            negative_sample_ids: string[];
        };
        /**
         * GridViewSampleRenderingType
         * @description Defines how samples are rendered in the grid view.
         * @enum {string}
         */
        GridViewSampleRenderingType: "cover" | "contain";
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * ImageCreate
         * @description Image class when inserting.
         */
        ImageCreate: {
            /** File Name */
            file_name: string;
            /** Width */
            width: number;
            /** Height */
            height: number;
            /**
             * Dataset Id
             * Format: uuid
             */
            dataset_id?: string;
            /** File Path Abs */
            file_path_abs?: string;
        };
        /**
         * ImageTable
         * @description This class defines the Image model.
         */
        ImageTable: {
            /** File Name */
            file_name: string;
            /** Width */
            width: number;
            /** Height */
            height: number;
            /**
             * Dataset Id
             * Format: uuid
             */
            dataset_id?: string;
            /** File Path Abs */
            file_path_abs?: string;
            /**
             * Sample Id
             * Format: uuid
             */
            sample_id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at?: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at?: string;
        };
        /**
         * ImageView
         * @description Image class when retrieving.
         */
        ImageView: {
            /** File Name */
            file_name: string;
            /** File Path Abs */
            file_path_abs: string;
            /**
             * Sample Id
             * Format: uuid
             */
            sample_id: string;
            /**
             * Dataset Id
             * Format: uuid
             */
            dataset_id: string;
            /** Annotations */
            annotations: components["schemas"]["AnnotationView"][];
            /** Width */
            width: number;
            /** Height */
            height: number;
            /** Tags */
            tags: components["schemas"]["ImageViewTag"][];
            /** Metadata Dict */
            metadata_dict?: unknown | null;
            /**
             * Captions
             * @default []
             */
            captions: components["schemas"]["CaptionView"][];
        };
        /**
         * ImageViewTag
         * @description Tag view inside Image view.
         */
        ImageViewTag: {
            /**
             * Tag Id
             * Format: uuid
             */
            tag_id: string;
            /** Name */
            name: string;
            /**
             * Kind
             * @enum {string}
             */
            kind: "sample" | "annotation";
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * ImageViewsWithCount
         * @description Response model for counted images.
         */
        ImageViewsWithCount: {
            /** Data */
            data: components["schemas"]["ImageView"][];
            /** Total Count */
            total_count: number;
            /** Nextcursor */
            nextCursor?: number | null;
        };
        /**
         * InstanceSegmentationAnnotationView
         * @description API response model for instance segmentation annotations.
         */
        InstanceSegmentationAnnotationView: {
            /** X */
            x: number;
            /** Y */
            y: number;
            /** Width */
            width: number;
            /** Height */
            height: number;
            /** Segmentation Mask */
            segmentation_mask?: number[] | null;
        };
        /**
         * LoadClassifierRequest
         * @description Request for loading classifier from a file.
         */
        LoadClassifierRequest: {
            /** File Path */
            file_path: string;
        };
        /**
         * LoadClassifierResponse
         * @description Response for loading classifier from a file.
         */
        LoadClassifierResponse: {
            /**
             * Classifier Id
             * Format: uuid
             */
            classifier_id: string;
        };
        /**
         * MetadataFilter
         * @description Encapsulates a single metadata filter condition.
         */
        MetadataFilter: {
            /** Key */
            key: string;
            /**
             * Op
             * @enum {string}
             */
            op: ">" | "<" | "==" | ">=" | "<=" | "!=";
            /** Value */
            value: unknown;
        };
        /**
         * MetadataInfoView
         * @description Metadata info response model for API endpoints.
         */
        MetadataInfoView: {
            /**
             * Name
             * @description The metadata key name
             */
            name: string;
            /**
             * Type
             * @description The metadata type (e.g., 'string', 'integer', 'float')
             */
            type: string;
            /**
             * Min
             * @description Minimum value for numerical metadata
             */
            min?: number | null;
            /**
             * Max
             * @description Maximum value for numerical metadata
             */
            max?: number | null;
        };
        /**
         * MetadataWeightingStrategy
         * @description Selection strategy based on metadata weighting.
         */
        MetadataWeightingStrategy: {
            /**
             * Strength
             * @default 1
             */
            strength: number;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            strategy_name: "weights";
            /** Metadata Key */
            metadata_key: string;
        };
        /**
         * ObjectDetectionAnnotationView
         * @description API response model for object detection annotations.
         */
        ObjectDetectionAnnotationView: {
            /** X */
            x: number;
            /** Y */
            y: number;
            /** Width */
            width: number;
            /** Height */
            height: number;
        };
        /**
         * Paginated
         * @description Paginated query parameters.
         */
        Paginated: {
            /**
             * Offset
             * @description Offset for pagination
             * @default 0
             */
            offset: number;
            /**
             * Limit
             * @description Limit for pagination
             * @default 100
             */
            limit: number;
        };
        /**
         * ReadSamplesRequest
         * @description Request body for reading samples with text embedding.
         */
        ReadSamplesRequest: {
            /** @description Filter parameters for samples */
            filters?: components["schemas"]["SampleFilter"] | null;
            /**
             * Text Embedding
             * @description Text embedding to search for
             */
            text_embedding?: number[] | null;
            /**
             * Sample Ids
             * @description The list of requested sample IDs
             */
            sample_ids?: string[] | null;
            /** @description Pagination parameters for offset and limit */
            pagination?: components["schemas"]["Paginated"] | null;
        };
        /**
         * SampleFilter
         * @description Encapsulates filter parameters for querying samples.
         */
        SampleFilter: {
            width?: components["schemas"]["FilterDimensions"] | null;
            height?: components["schemas"]["FilterDimensions"] | null;
            /** Annotation Label Ids */
            annotation_label_ids?: string[] | null;
            /** Tag Ids */
            tag_ids?: string[] | null;
            /** Metadata Filters */
            metadata_filters?: components["schemas"]["MetadataFilter"][] | null;
            /** Sample Ids */
            sample_ids?: string[] | null;
        };
        /**
         * SampleIdsBody
         * @description body parameters for adding or removing thing_ids.
         */
        SampleIdsBody: {
            /**
             * Sample Ids
             * @description sample ids to add/remove
             */
            sample_ids?: string[] | null;
        };
        /**
         * SampleType
         * @description The type of samples in the dataset.
         * @enum {string}
         */
        SampleType: "video" | "image" | "image_annotation";
        /**
         * SamplesToRefineResponse
         * @description Response for samples for classifier refinement.
         *
         *     Maps class names to lists of sample IDs. First class gets high confidence
         *     samples, second class gets low confidence samples.
         */
        SamplesToRefineResponse: {
            /** Samples */
            samples: {
                [key: string]: string[];
            };
        };
        /**
         * SelectionRequest
         * @description Request model for selection.
         */
        SelectionRequest: {
            /**
             * N Samples To Select
             * @description Number of samples to select
             */
            n_samples_to_select: number;
            /**
             * Selection Result Tag Name
             * @description Name for the result tag
             */
            selection_result_tag_name: string;
            /** Strategies */
            strategies: (components["schemas"]["EmbeddingDiversityStrategy"] | components["schemas"]["MetadataWeightingStrategy"])[];
        };
        /**
         * SemanticSegmentationAnnotationView
         * @description Response model for semantic segmentation annotation.
         */
        SemanticSegmentationAnnotationView: {
            /** Segmentation Mask */
            segmentation_mask: number[];
        };
        /**
         * SettingView
         * @description View class for Settings model.
         */
        SettingView: {
            /**
             * @description Controls how samples are rendered in the grid view
             * @default contain
             */
            grid_view_sample_rendering: components["schemas"]["GridViewSampleRenderingType"];
            /**
             * Key Hide Annotations
             * @description Key to temporarily hide annotations while pressed
             * @default v
             */
            key_hide_annotations: string;
            /**
             * Key Go Back
             * @description Key to navigate back from detail view to grid view
             * @default Escape
             */
            key_go_back: string;
            /**
             * Show Annotation Text Labels
             * @description Controls whether to show text labels on annotations
             * @default true
             */
            show_annotation_text_labels: boolean;
            /**
             * Show Sample Filenames
             * @description Controls whether to show sample filenames in the samples grid view
             * @default false
             */
            show_sample_filenames: boolean;
            /**
             * Setting Id
             * Format: uuid
             */
            setting_id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * TagCreateBody
         * @description Tag model when creating.
         */
        TagCreateBody: {
            /** Name */
            name: string;
            /**
             * Description
             * @default
             */
            description: string | null;
            /**
             * Kind
             * @default sample
             * @enum {string}
             */
            kind: "sample" | "annotation";
        };
        /**
         * TagTable
         * @description This class defines the Tag model.
         */
        TagTable: {
            /** Name */
            name: string;
            /**
             * Description
             * @default
             */
            description: string | null;
            /**
             * Kind
             * @enum {string}
             */
            kind: "sample" | "annotation";
            /**
             * Tag Id
             * Format: uuid
             */
            tag_id?: string;
            /**
             * Dataset Id
             * Format: uuid
             */
            dataset_id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at?: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at?: string;
        };
        /**
         * TagUpdateBody
         * @description Tag model when updating.
         */
        TagUpdateBody: {
            /** Name */
            name: string;
            /**
             * Description
             * @default
             */
            description: string | null;
            /**
             * Kind
             * @default sample
             * @enum {string}
             */
            kind: "sample" | "annotation";
            /** Dataset Id */
            dataset_id?: string | null;
        };
        /**
         * TagView
         * @description Tag model when retrieving.
         */
        TagView: {
            /** Name */
            name: string;
            /**
             * Description
             * @default
             */
            description: string | null;
            /**
             * Kind
             * @enum {string}
             */
            kind: "sample" | "annotation";
            /**
             * Tag Id
             * Format: uuid
             */
            tag_id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /**
         * UpdateAnnotationsRequest
         * @description Request for updating classifier annotations.
         */
        UpdateAnnotationsRequest: {
            /** Annotations */
            annotations: {
                [key: string]: string[];
            };
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    read_datasets: {
        parameters: {
            query?: {
                /** @description Offset for pagination */
                offset?: number;
                /** @description Limit for pagination */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatasetView"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_dataset: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatasetViewWithCount"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_dataset: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DatasetCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DatasetTable"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_dataset: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    export_dataset_to_absolute_paths: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExportBody"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    export_dataset_stats: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExportBody"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_tags: {
        parameters: {
            query?: {
                /** @description Offset for pagination */
                offset?: number;
                /** @description Limit for pagination */
                limit?: number;
            };
            header?: never;
            path: {
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagView"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_tag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TagCreateBody"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagView"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_tag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tag_id: string;
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagTable"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_tag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tag_id: string;
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TagUpdateBody"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagTable"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_tag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tag_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_sample_ids_to_tag_id: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the dataset */
                dataset_id: string;
                tag_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SampleIdsBody"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    remove_thing_ids_to_tag_id: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tag_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SampleIdsBody"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_annotation_ids_to_tag_id: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the dataset */
                dataset_id: string;
                tag_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AnnotationIdsBody"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    remove_annotation_ids_to_tag_id: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tag_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AnnotationIdsBody"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    export_dataset_annotations: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_samples: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReadSamplesRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ImageViewsWithCount"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_sample_dimensions: {
        parameters: {
            query?: {
                annotation_label_ids?: string[] | null;
            };
            header?: never;
            path: {
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: number;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_sample: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the dataset */
                dataset_id: string;
                sample_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ImageView"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_sample: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sample_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ImageCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ImageTable"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_sample: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the dataset */
                dataset_id: string;
                sample_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_tag_to_sample: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sample_id: string;
                /** @description The ID of the dataset */
                dataset_id: string;
                tag_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    remove_tag_from_sample: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tag_id: string;
                /** @description The ID of the dataset */
                dataset_id: string;
                sample_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_annotation_labels: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AnnotationLabelTable"][];
                };
            };
        };
    };
    create_annotation_label: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AnnotationLabelCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AnnotationLabelTable"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_annotation_label: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                label_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AnnotationLabelTable"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_annotation_label: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                label_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AnnotationLabelCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AnnotationLabelTable"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_annotation_label: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                label_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_annotations: {
        parameters: {
            query?: {
                annotation_label_ids?: string[] | null;
                tag_ids?: string[] | null;
                cursor?: number;
                limit?: number;
            };
            header?: never;
            path: {
                /** @description The ID of the dataset */
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AnnotationViewsWithCount"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_annotations: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AnnotationUpdateInput"][];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AnnotationBaseTable"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_annotation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the dataset */
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AnnotationCreateInput"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AnnotationView"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    count_annotations_by_dataset: {
        parameters: {
            query?: {
                filtered_labels?: string[] | null;
                min_width?: number | null;
                max_width?: number | null;
                min_height?: number | null;
                max_height?: number | null;
            };
            header?: never;
            path: {
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": string[] | null;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string | number;
                    }[];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    add_tag_to_annotation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                annotation_id: string;
                tag_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    remove_tag_from_annotation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tag_id: string;
                annotation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_annotation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the dataset */
                dataset_id: string;
                annotation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AnnotationDetailsView"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_annotation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                dataset_id: string;
                /** @description ID of the annotation to update */
                annotation_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AnnotationUpdateInput"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AnnotationBaseTable"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_annotation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The ID of the dataset */
                dataset_id: string;
                /** @description ID of the annotation to delete */
                annotation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_captions: {
        parameters: {
            query?: {
                cursor?: number;
                limit?: number;
            };
            header?: never;
            path: {
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CaptionViewsBySampleWithCount"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    embed_text: {
        parameters: {
            query: {
                /** @description The text to embed. */
                query_text: string;
                /** @description The ID of the embedding model to use. */
                embedding_model_id?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": number[];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_settings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingView"];
                };
            };
        };
    };
    set_settings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SettingView"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingView"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_negative_samples: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetNegativeSamplesRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetNegativeSamplesResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    samples_to_refine: {
        parameters: {
            query: {
                dataset_id: string;
            };
            header?: never;
            path: {
                classifier_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SamplesToRefineResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    sample_history: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                classifier_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SamplesToRefineResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    commit_temp_classifier: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                classifier_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": null;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    drop_temp_classifier: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                classifier_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": null;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    save_classifier_to_file: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                classifier_id: string;
                export_type: "sklearn" | "lightly";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    load_classifier_from_file: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoadClassifierRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoadClassifierResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    load_classifier_from_buffer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_load_classifier_from_buffer_api_classifiers_load_classifier_from_buffer_post"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    train_classifier: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                classifier_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": null;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_classifiers_annotations: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                classifier_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateAnnotationsRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": null;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_classifier: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateClassifierRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateClassifierResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_all_classifiers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAllClassifiersResponse"];
                };
            };
        };
    };
    run_classifier_route: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                classifier_id: string;
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": null;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_2d_embeddings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["GetEmbeddings2DRequest"] | null;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_features: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    get_metadata_info: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MetadataInfoView"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    compute_typicality_metadata: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ComputeTypicalityRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_combination_selection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SelectionRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    serve_image_by_sample_id: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sample_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
