name: End2End Test

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:


concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_OPTIONS: --max-old-space-size=4096
  DATASET_PATH: $(pwd)/datasets
  E2E_BASE_URL: http://localhost:8001
  LIGHTLY_STUDIO_LICENSE_KEY: ${{ secrets.MUNDIG_LICENSE_KEY }}

jobs:
  end-to-end-test:
    name: End2End Test (shard ${{ matrix.shard.index }}/${{ matrix.shard.total }})
    strategy:
      fail-fast: false
      matrix:
        # Run each Playwright shard on its own runner to split the suite by file.
        shard:
          - index: 1
            total: 2
          - index: 2
            total: 2
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Authenticate to download lightly-edge-sdk.
      - name: Authenticate with GCP
        uses: 'google-github-actions/auth@v2'
        with:
          project_id: boris-250909
          credentials_json: ${{ secrets.GCP_LIGHTLY_STUDIO_CI_READONLY }}

      ### Caching rules for the workflow ###
      - name: Cache UI app build
        id: cache-ui-build
        uses: actions/cache@v4
        with:
          path: |
            lightly_studio_view/build
            lightly_studio/src/lightly_studio/dist_lightly_studio_view_app
          key: ui-build-${{ hashFiles('lightly_studio_view/src/**', 'lightly_studio_view/public/**', 'lightly_studio_view/package.json', 'lightly_studio_view/package-lock.json') }}

      - name: Cache example dataset
        id: cache-example-dataset
        uses: actions/cache@v4
        with:
          path: lightly_studio/datasets/coco-128
          key: coco-example-dataset

      ### Setup steps for the workflow ###
      - name: Set Up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.8"

      - name: Set Up uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "0.8.17"
          enable-cache: true

      - name: Set Up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.11.0'
          cache: 'npm'
          cache-dependency-path: lightly_studio_view/package-lock.json

      # Always install npm dependencies (needed for npx playwright commands)
      # The setup-node npm cache makes this fast even on repeated runs
      - name: Install npm dependencies
        working-directory: lightly_studio_view
        run: npm ci

      # Cache Playwright browsers to avoid re-downloading each run
      - name: Cache Playwright browsers
        id: cache-playwright-browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('lightly_studio_view/package-lock.json') }}

      # Always ensure system packages for browsers are present on Ubuntu
      - name: Install Playwright system dependencies
        working-directory: lightly_studio_view
        run: npx playwright install-deps chromium

      # Only download browser binaries when cache misses; otherwise reuse cache
      - name: Install Playwright browsers
        if: steps.cache-playwright-browsers.outputs.cache-hit != 'true'
        working-directory: lightly_studio_view
        run: npx playwright install chromium

      - name: Download example dataset
        if: steps.cache-example-dataset.outputs.cache-hit != 'true'
        run: |
          mkdir -p lightly_studio/datasets/coco-128
          git clone --depth=1 https://github.com/lightly-ai/dataset_examples_studio.git tmp_dataset_repo
          cp -r tmp_dataset_repo/coco_subset_128_images/* lightly_studio/datasets/coco-128/
          rm -rf tmp_dataset_repo

      - name: Install lightly_studio python dependencies
        working-directory: lightly_studio
        run: make install-optional-deps

      ### Building steps for the workflow ###
      - name: Build the ui application
        if: steps.cache-ui-build.outputs.cache-hit != 'true'
        working-directory: lightly_studio_view
        run: |
          rm -rf build
          npm run build

      - name: Copy the built ui app to lightly_studio source folder
        if: steps.cache-ui-build.outputs.cache-hit != 'true'
        run: |
          rm -rf lightly_studio/src/lightly_studio/dist_lightly_studio_view_app
          cp -r lightly_studio_view/build/ lightly_studio/src/lightly_studio/dist_lightly_studio_view_app
      
      - name: Start lightly_studio server with test dataset
        working-directory: lightly_studio
        # TODO(Michal, 10/2025): Starting up the server redownloads the embedding model. Consider caching it.
        run: |
          uv run e2e-tests/index_dataset_for_end2end_ui_tests.py > server.log 2>&1 &
          echo "SERVER_PID=$!" >> $GITHUB_ENV
        id: server

      - name: Wait for the server to start
        timeout-minutes: 5
        run: |
          echo "Waiting for the server to become available..."
          timeout=360
          elapsed=0
          interval=5

          while [ $elapsed -lt $timeout ]; do
            if curl -s -f ${E2E_BASE_URL}/healthz > /dev/null 2>&1; then
              echo "✅ Server is up and running after ${elapsed} seconds!"
              break
            fi
            echo "⏳ Server not ready yet, waiting... (${elapsed}/${timeout} seconds)"
            sleep $interval
            elapsed=$((elapsed + interval))
          done

          if [ $elapsed -ge $timeout ]; then
            echo "❌ Timed out waiting for server to become available"
            exit 1
          fi

      ### Running end-to-end tests ###
      # Shard Playwright specs across runners for parallel execution.
      - name: Run end-to-end tests for indexed dataset
        working-directory: lightly_studio_view
        run: |
          npx playwright test \
            --reporter=html \
            --trace=on \
            --shard=${{ matrix.shard.index }}/${{ matrix.shard.total }}
        timeout-minutes: 10
      
      ### Cleanup steps for the workflow ###
      - name: Show server logs after failure
        if: failure()
        working-directory: lightly_studio
        run: |
          echo "Server logs:"
          cat server.log

      - name: Upload Playwright report after failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          # Each shard uploads its own Playwright HTML report.
          name: playwright-report-shard-${{ matrix.shard.index }}-of-${{ matrix.shard.total }}
          path: lightly_studio_view/playwright-report
          retention-days: 5

      - name: Stop lightly_studio application running in background
        if: always()
        run: |
          kill ${{ env.SERVER_PID }} || true

  # Summary job that reports overall test status
  end-to-end-test-summary:
    name: End2End Test
    needs: end-to-end-test
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check test results
        run: |
          if [[ "${{ needs.end-to-end-test.result }}" != "success" ]]; then
            echo "❌ One or more test shards failed"
            exit 1
          fi
          echo "✅ All end-to-end test shards passed successfully"
